name: CI/CD Pipeline

on:
  push:
    branches: ["main", "feature/production-build-deployment"]

concurrency:
  group: cicd-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      REGISTRY: ${{ secrets.REGISTRY_NAME }}     # e.g. registry.digitalocean.com/your-registry
      CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}  # your DO K8s cluster name

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: web
            image_name: web
            dockerfile: Dockerfile.frontend
            deployment: frontend
            container: frontend
            target: runner
          - name: api
            image_name: api
            dockerfile: Dockerfile.backend
            deployment: app
            container: app
            target: runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry (short-lived)
        run: doctl registry login --expiry-seconds 1200

      # Compute a readable tag with DATE + branch + run number
      - name: Compute image tag and namespace
        id: meta
        shell: bash
        run: |
          DATE=$(date +'%m%d%Y')
          SAFE_BRANCH=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]' | tr -cs 'a-z0-9.-' '-')
          TAG="${SAFE_BRANCH}-${DATE}-r${{ github.run_number }}"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "namespace=$SAFE_BRANCH" >> "$GITHUB_OUTPUT"

      # Build deployable image (runner stage)
      - name: Build image (${{ matrix.image_name }})
        run: |
          cd codewit
          if [ "${{ matrix.name }}" = "api" ]; then
            docker build \
              -f "${{ matrix.dockerfile }}" \
              --target runner \
              -t "${{ env.REGISTRY }}/${{ matrix.image_name }}:${{ steps.meta.outputs.tag }}" .
          else
            docker build \
              -f "${{ matrix.dockerfile }}" \
              -t "${{ env.REGISTRY }}/${{ matrix.image_name }}:${{ steps.meta.outputs.tag }}" .
          fi

      # Build migrator image locally for API only (DO NOT PUSH)
      - name: Build migrator image (local only; api)
        if: matrix.name == 'api'
        run: |
          cd codewit
          docker build \
            -f Dockerfile.backend \
            --target migrator \
            -t codewit-migrator:${{ steps.meta.outputs.tag }} .

      - name: Push image (${{ matrix.image_name }})
        run: docker push "${{ env.REGISTRY }}/${{ matrix.image_name }}:${{ steps.meta.outputs.tag }}"

      # Run migrations & seeds against PUBLIC DB using secrets (api only)
      - name: Run DB migrations (api; no push)
        if: matrix.name == 'api'
        env:
          SEQ_ENV: prod
        run: |
          set -euo pipefail
          echo "Running migrations against public DB host..."
          docker run --rm \
            -e NODE_ENV=production \
            -e SEQ_ENV="${{ env.SEQ_ENV }}" \
            -e DB_HOST="${{ secrets.DB_HOST }}" \
            -e DB_PORT="${{ secrets.DB_PORT }}" \
            -e DB_USER="${{ secrets.DB_USER }}" \
            -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            -e DB_NAME="${{ secrets.DB_NAME }}" \
            codewit-migrator:${{ steps.meta.outputs.tag }}

      - name: Save kubeconfig with short-lived credentials
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 "${{ env.CLUSTER_NAME }}"

      - name: Set image in Kubernetes (${{ matrix.deployment }})
        run: |
          kubectl -n default set image deployment/${{ matrix.deployment }} \
            ${{ matrix.container }}=${{ env.REGISTRY }}/${{ matrix.image_name }}:${{ steps.meta.outputs.tag }} \
            --record
          kubectl -n default rollout status deployment/${{ matrix.deployment }} --timeout=120s